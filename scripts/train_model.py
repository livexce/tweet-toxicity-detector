import pandas as pd
import numpy as np
import joblib
from pathlib import Path
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.feature_extraction.text import TfidfVectorizer

# ðŸ“‚ Chemins des fichiers
DATA_DIR = Path("data/processed")
MODEL_DIR = Path("models")
MODEL_DIR.mkdir(exist_ok=True)

# ðŸ“¥ Chargement des donnÃ©es
train = pd.read_csv(DATA_DIR / "train.csv")
val = pd.read_csv(DATA_DIR / "val.csv")
test = pd.read_csv(DATA_DIR / "test.csv")

# ðŸ§ª Pipeline avec TF-IDF + Logistic Regression
pipeline = Pipeline([
    ("tfidf", TfidfVectorizer()),
    ("clf", LogisticRegression(max_iter=1000))
])

# ðŸš‚ EntraÃ®nement
pipeline.fit(train["text"], train["label"])

# ðŸ“Š Ã‰valuation sur validation
print("\nðŸ“ˆ Validation Report:")
y_val_pred = pipeline.predict(val["text"])
print(classification_report(val["label"], y_val_pred))
print("\nMatrice de confusion:")
print(confusion_matrix(val["label"], y_val_pred))

# ðŸ“Š Ã‰valuation sur test
print("\nðŸ“Š Test Report:")
y_test_pred = pipeline.predict(test["text"])
print(classification_report(test["label"], y_test_pred))
print("\nMatrice de confusion:")
print(confusion_matrix(test["label"], y_test_pred))

# ðŸ’¾ Sauvegarde du modÃ¨le
joblib.dump(pipeline, MODEL_DIR / "toxicity_model.pkl")
print("\nâœ… ModÃ¨le sauvegardÃ© dans models/toxicity_model.pkl")
